.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez plus profond√©ment dans l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : B√©n√©ficiez d'un acc√®s anticip√© aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et concours** : Participez √† des concours et √† des promotions sp√©ciales pendant les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

5. Arr√™ter toutes les actions
==================================

Apr√®s les chapitres pr√©c√©dents, vous avez peut-√™tre remarqu√© que le contr√¥le des servomoteurs de PiDog est divis√© en trois threads. Cela permet √† la t√™te et au corps de PiDog de bouger simultan√©ment, m√™me en utilisant seulement deux lignes de code.

**Voici quelques fonctions qui g√®rent ces trois threads de servomoteurs :**

.. code-block:: python

    Pidog.wait_all_done()
    
Attend que toutes les actions dans les buffers des jambes, de la t√™te et de la queue soient ex√©cut√©es.

.. code-block:: python

    Pidog.body_stop()
    
Arr√™te toutes les actions des jambes, de la t√™te et de la queue.

.. code-block:: python

    Pidog.stop_and_lie()
    
Arr√™te toutes les actions des jambes, de la t√™te et de la queue, puis remet le robot en position "couch√©".

.. code-block:: python

    Pidog.close()
    
Arr√™te toutes les actions, remet en position "couch√©" et ferme tous les threads, g√©n√©ralement utilis√© pour quitter un programme.


**Voici quelques exemples d'utilisation courants :**

.. code-block:: python
    :emphasize-lines: 10,36,45

    from pidog import Pidog
    import time

    my_dog = Pidog()

    try:
        # pr√©paration pour les pompes
        my_dog.legs_move([[45, 35, -45, -35, 80, 70, -80, -70]], speed=30)
        my_dog.head_move([[0, 0, 0]], pitch_comp=-10, speed=80) 
        my_dog.wait_all_done() # attendre la fin de toutes les actions
        time.sleep(0.5)

        # pompes 
        leg_pushup_action = [
            [90, -30, -90, 30, 80, 70, -80, -70],
            [45, 35, -45, -35, 80, 70, -80, -70],       
        ]
        head_pushup_action = [
            [0, 0, -30],
            [0, 0, 20],
        ]
        
        # remplir les buffers d'actions
        for _ in range(50):
            my_dog.legs_move(leg_pushup_action, immediately=False, speed=50)
            my_dog.head_move(head_pushup_action, pitch_comp=-10, immediately=False, speed=50)
        
        # afficher la longueur des buffers
        print(f"legs buffer length (start): {len(my_dog.legs_action_buffer)}")
        
        # maintenir pendant 5 secondes et afficher la longueur des buffers
        time.sleep(5)
        print(f"legs buffer length (5s): {len(my_dog.legs_action_buffer)}")
        
        # arr√™ter les actions et afficher la longueur des buffers
        my_dog.stop_and_lie()
        print(f"legs buffer length (stop): {len(my_dog.legs_action_buffer)}")

    except KeyboardInterrupt:
        pass
    except Exception as e:
        print(f"\033[31mERROR: {e}\033[m")
    finally:
        print("closing ...")
        my_dog.close() # fermer tous les threads des servomoteurs
